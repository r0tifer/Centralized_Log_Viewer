name: Release Binaries

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    env:
      APP_NAME: centralized-log-viewer
      BIN_NAME: clv
      INSTALL_PREFIX: /opt/centralized-log-viewer
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tooling
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rpm build-essential
          sudo gem install --no-document fpm
          python -m pip install --upgrade pip
          pip install poetry pyinstaller

      - name: Install project deps
        run: |
          set -euo pipefail
          poetry install --no-interaction --no-root

      - name: Build PyInstaller (onedir)
        run: |
          set -euo pipefail
          pyinstaller -y \
            --name "${BIN_NAME}" \
            --onedir \
            --console \
            --add-data "centralized_log_viewer/log_viewer.css:." \
            centralized_log_viewer/main.py

      - name: Stage install tree
        run: |
          set -euo pipefail
          STAGE="stage"
          INSTDIR="${STAGE}${INSTALL_PREFIX}"
          USRBIN="${STAGE}/usr/local/bin"
          mkdir -p "${INSTDIR}" "${USRBIN}"
          cp -a "dist/${BIN_NAME}/." "${INSTDIR}/"
          printf '#!/usr/bin/env bash\nexec %s/%s "$@"\n' "${INSTALL_PREFIX}" "${BIN_NAME}" > "${USRBIN}/${BIN_NAME}"
          chmod +x "${USRBIN}/${BIN_NAME}"

      - name: Build packages with fpm (DEB & RPM)
        env:
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          STAGE="stage"
          VER="${VERSION#v}"
          fpm -s dir -t deb -n "${APP_NAME}" -v "${VER}" \
            --description "Centralized Log Viewer (Textual TUI)" \
            --license "MIT" \
            --url "https://github.com/${{ github.repository }}" \
            -C "${STAGE}" .
          fpm -s dir -t rpm -n "${APP_NAME}" -v "${VER}" \
            --description "Centralized Log Viewer (Textual TUI)" \
            --license "MIT" \
            --url "https://github.com/${{ github.repository }}" \
            -C "${STAGE}" .

      - name: Make tarball (universal fallback)
        run: |
          set -euo pipefail
          tar -C dist -czf "${APP_NAME}-linux-x86_64.tar.gz" "${BIN_NAME}"

      - name: Compute checksums
        run: |
          set -euo pipefail
          sha256sum ./*.deb ./*.rpm "${APP_NAME}-linux-x86_64.tar.gz" > SHA256SUMS
          cat SHA256SUMS

      - name: Import GPG key
        if: ${{ env.GPG_PRIVATE_KEY != '' }}
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sign SHA256SUMS
        if: ${{ env.GPG_PRIVATE_KEY != '' }}
        run: |
          set -euo pipefail
          gpg --batch --yes --pinentry-mode loopback --passphrase "${GPG_PASSPHRASE:-}" \
            --armor --output SHA256SUMS.asc --detach-sign SHA256SUMS

      - name: Create/Update GitHub Release & upload artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            *.deb
            *.rpm
            ${{ env.APP_NAME }}-linux-x86_64.tar.gz
            SHA256SUMS
            SHA256SUMS.asc
          fail_on_unmatched_files: false

  build-pypi:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build wheel and sdist
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install poetry
          poetry install --no-interaction --no-root
          poetry build

      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') && env.PYPI_TOKEN != '' }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          set -euo pipefail
          poetry publish --username __token__ --password "${POETRY_PYPI_TOKEN_PYPI}"
